// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © AlgoAlpha

//@version=6
indicator("Trend Targets [AlgoAlpha]", "AlgoAlpha - Trend Targets", overlay = true)

// Trend settings
st_factor = input.float(12, title="Supertrend Factor", minval=1, step=0.5, group="Trend Settings", 
     tooltip="Multiplier for the ATR to determine Supertrend bands width. Higher values create wider bands and fewer signals.")
st_atr_period = input.int(90, title="Supertrend ATR Period", minval=1, group="Trend Settings", 
     tooltip="Number of bars used to calculate the ATR for Supertrend. Longer periods create smoother, less reactive bands.")
wma_length = input.int(40, title="WMA Length", minval=1, group="Trend Settings", 
     tooltip="Length of the Weighted Moving Average applied to the SuperTrend. Higher values create smoother, less reactive lines.")
ema_length = input.int(14, title="EMA Length", minval=1, group="Trend Settings", 
     tooltip="Length of the Exponential Moving Average applied to the WMA. Controls the final smoothness of the trend line.")

//Continuation settings
cont_factor = input.int(3, title="Confirmation count", minval=1, group="Rejection Settings", 
     tooltip="Number of consecutive bars that must consolidate at the trend line before a rejection signal is generated. Higher values require more bars to confirm a trend.")

// Volatility settings
shw_TP1 = input.bool(true, title="Show Take Profit Levels", group="Targets", 
     tooltip="Toggle visibility of take profit target levels on the chart.")
atr_period = input.int(14, title="Volatility (ATR) period", minval=1, group="Targets", 
     tooltip="Number of bars used to calculate the Average True Range for position sizing and targets.")
sl_multiplier = input.float(5, title="Stop Loss ATR Multiplier", minval=0.1, step=0.1, group="Targets", 
     tooltip="Multiplier applied to ATR to determine stop loss distance from entry. Higher values place stops further away.")
tp1_multiplier = input.float(0.5, title="TP1 Multiplier", minval=0.1, step=0.1, tooltip="Multiple of SL distance for first take profit target.", group="Targets")
tp2_multiplier = input.float(1.0, title="TP2 Multiplier", minval=0.1, step=0.1, tooltip="Multiple of SL distance for second take profit target.", group="Targets")
tp3_multiplier = input.float(1.5, title="TP3 Multiplier", minval=0.1, step=0.1, tooltip="Multiple of SL distance for third take profit target.", group="Targets")

volatility = ta.atr(atr_period)
// Appearance settings
green = input.color(#00ffbb, title="Bullish Color", tooltip="Color used for bullishness", group="Appearance")
red = input.color(#ff1100, title="Bearish Color", tooltip="Color used for bearishness", group="Appearance")


pine_supertrend(factor, atrPeriod) =>
    src = hl2
    atr = ta.atr(atrPeriod)
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])

    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand

    [lowerBand, upperBand]

[lwr, upr] = pine_supertrend(st_factor, st_atr_period)
tL = ta.ema(ta.wma(math.avg(lwr, upr), wma_length), ema_length)

var trend = 0
if ta.crossover(tL, tL[1])
    trend := 1
if ta.crossunder(tL, tL[1])
    trend := -1
      
var rejcount = 0

bullishrej = trend == 1 and high > tL and low < tL
bearishrej = trend == -1 and high > tL and low < tL

if (bullishrej or bearishrej)
    rejcount += 1

if ta.cross(trend, 0) or (not (bullishrej or bearishrej) and rejcount > 0)
    rejcount := 0

plotchar((rejcount > cont_factor and trend == 1) ? tL  : na, "Bullish Rejection", "▲", location.belowbar, green, size = size.tiny)
plotchar((rejcount > cont_factor and trend == -1) ? tL  : na, "Bearish Rejection", "▼", location.abovebar, red, size = size.tiny)

plot(tL, "Baseline", color=trend == 1 ? color.new(green, 50) : color.new(red, 50))

barcolor(trend == 1 ? color.new(green, 50) : color.new(red, 50))

plotshape(ta.crossover(tL, tL[1]) ? tL : na, title="Bullish Trend Change", style=shape.labelup, location=location.absolute, size=size.small, color=green)
plotshape(ta.crossunder(tL, tL[1]) ? tL : na, title="Bearish Trend Change", style=shape.labeldown, location=location.absolute, size=size.small, color=red)

longSignal = ta.crossover(trend, 0)
shortSignal = ta.crossunder(trend, 0)
var SL = 0.0
var TP1_lvl = 0.0
var TP2_lvl = 0.0
var TP3_lvl = 0.0
var line entry_line = na
var line sl_line = na
var line tp1_line = na
var line tp2_line = na
var line tp3_line = na 
var label entry_label = na
var label sl_label = na
var label tp1_label = na
var label tp2_label = na
var label tp3_label = na

if longSignal and shw_TP1 
    SL := low - volatility * sl_multiplier
    TP1_lvl := close + math.abs(close - SL) * tp1_multiplier
    TP2_lvl := close + math.abs(close - SL) * tp2_multiplier
    TP3_lvl := close + math.abs(close - SL) * tp3_multiplier
    entry_line := line.new(bar_index, close, bar_index, close, color = green, width = 3)
    entry_label := label.new(bar_index, close, text = "Entry ▸ " + str.tostring(close, format.mintick), style = label.style_label_left, color = green, textcolor = color.white)

    sl_line := line.new(bar_index, SL, bar_index, SL, color = color.new(red, 80), width = 3)
    sl_label := label.new(bar_index, SL, text = "✘ SL ▸ " + str.tostring(SL, format.mintick), style = label.style_label_left, color = color.new(red, 80), textcolor = color.white)

    tp1_line := line.new(bar_index, TP1_lvl, bar_index, TP1_lvl, color = color.new(green, 80), width = 3)
    tp1_label := label.new(bar_index, TP1_lvl, text = " ✔ TP1 ▸ " + str.tostring(TP1_lvl, format.mintick), style = label.style_label_left, color = color.new(green, 80), textcolor = color.white)

    tp2_line := line.new(bar_index, TP2_lvl, bar_index, TP2_lvl, color = color.new(green, 80), width = 3)
    tp2_label := label.new(bar_index, TP2_lvl, text = " ✔ TP2 ▸ " + str.tostring(TP2_lvl, format.mintick), style = label.style_label_left, color = color.new(green, 80), textcolor = color.white)

    tp3_line := line.new(bar_index, TP3_lvl, bar_index, TP3_lvl, color = color.new(green, 80), width = 3)
    tp3_label := label.new(bar_index, TP3_lvl, text = " ✔ TP3 ▸ " + str.tostring(TP3_lvl, format.mintick), style = label.style_label_left, color = color.new(green, 80), textcolor = color.white)


    line.delete(entry_line[1])
    label.delete(entry_label[1])

    line.delete(sl_line[1])
    label.delete(sl_label[1])

    line.delete(tp1_line[1])
    label.delete(tp1_label[1])
    
    line.delete(tp2_line[1])
    label.delete(tp2_label[1])

    line.delete(tp3_line[1])
    label.delete(tp3_label[1])
else 
    line.set_x2(entry_line, bar_index)
    label.set_x(entry_label, bar_index)

    line.set_x2(sl_line, bar_index)
    label.set_x(sl_label, bar_index)

    line.set_x2(tp1_line, bar_index)
    label.set_x(tp1_label, bar_index)

    line.set_x2(tp2_line, bar_index)
    label.set_x(tp2_label, bar_index)

    line.set_x2(tp3_line, bar_index)
    label.set_x(tp3_label, bar_index)

if shortSignal and shw_TP1 
    SL := high + volatility * sl_multiplier
    TP1_lvl := close - math.abs(close - SL) * tp1_multiplier
    TP2_lvl := close - math.abs(close - SL) * tp2_multiplier
    TP3_lvl := close - math.abs(close - SL) * tp3_multiplier
    entry_line := line.new(bar_index, close, bar_index, close, color = red, width = 3)
    entry_label := label.new(bar_index, close, text = "Entry ▸ " + str.tostring(close, format.mintick), style = label.style_label_left, color = red, textcolor = color.white)

    sl_line := line.new(bar_index, SL, bar_index, SL, color = color.new(red, 80), width = 3)
    sl_label := label.new(bar_index, SL, text = "✘ SL ▸ " + str.tostring(SL, format.mintick), style = label.style_label_left, color = color.new(red, 80), textcolor = color.white)

    tp1_line := line.new(bar_index, TP1_lvl, bar_index, TP1_lvl, color = color.new(green, 80), width = 3)
    tp1_label := label.new(bar_index, TP1_lvl, text = " ✔ TP1 ▸ " + str.tostring(TP1_lvl, format.mintick), style = label.style_label_left, color = color.new(green, 80), textcolor = color.white)

    tp2_line := line.new(bar_index, TP2_lvl, bar_index, TP2_lvl, color = color.new(green, 80), width = 3)
    tp2_label := label.new(bar_index, TP2_lvl, text = " ✔ TP2 ▸ " + str.tostring(TP2_lvl, format.mintick), style = label.style_label_left, color = color.new(green, 80), textcolor = color.white)

    tp3_line := line.new(bar_index, TP3_lvl, bar_index, TP3_lvl, color = color.new(green, 80), width = 3)
    tp3_label := label.new(bar_index, TP3_lvl, text = " ✔ TP3 ▸ " + str.tostring(TP3_lvl, format.mintick), style = label.style_label_left, color = color.new(green, 80), textcolor = color.white)


    line.delete(entry_line[1])
    label.delete(entry_label[1])

    line.delete(sl_line[1])
    label.delete(sl_label[1])

    line.delete(tp1_line[1])
    label.delete(tp1_label[1])
    
    line.delete(tp2_line[1])
    label.delete(tp2_label[1])

    line.delete(tp3_line[1])
    label.delete(tp3_label[1])
else 
    line.set_x2(entry_line, bar_index+40)
    label.set_x(entry_label, bar_index+40)

    line.set_x2(sl_line, bar_index+40)
    label.set_x(sl_label, bar_index+40)

    line.set_x2(tp1_line, bar_index+40)
    label.set_x(tp1_label, bar_index+40)

    line.set_x2(tp2_line, bar_index+40)
    label.set_x(tp2_label, bar_index+40)

    line.set_x2(tp3_line, bar_index+40)
    label.set_x(tp3_label, bar_index+40)

liness = array.new_linefill()

liness.unshift(linefill.new(entry_line, sl_line, color.new(color.red, 95)))
liness.unshift(linefill.new(entry_line, tp3_line, color.new(color.green, 95)))


// Alert for trend changes
alertcondition(ta.crossover(close, SL), title="Trend Change: Bullish", message="Price crossed above SL - Potential Bullish Trend")
alertcondition(ta.crossunder(close, SL), title="Trend Change: Bearish", message="Price crossed below SL - Potential Bearish Trend")

// Alert for rejection signals
alertcondition(ta.crossover(high, SL) and close < SL, title="Rejection: Bearish", message="Price rejected at SL - Bearish Rejection")
alertcondition(ta.crossunder(low, SL) and close > SL, title="Rejection: Bullish", message="Price rejected at SL - Bullish Rejection")

// Alerts for TP hits
alertcondition(ta.crossover(close, TP1_lvl), title="TP1 Hit", message="Price reached TP1 level")
alertcondition(ta.crossover(close, TP2_lvl), title="TP2 Hit", message="Price reached TP2 level")
alertcondition(ta.crossover(close, TP3_lvl), title="TP3 Hit", message="Price reached TP3 level")
